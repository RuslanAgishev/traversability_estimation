<?xml version="1.0" encoding="UTF-8" ?>
<launch>
<!--    <arg name="dir" default="/media/petrito1/tp-t5/data/robingas"/>-->
<!--    <arg name="dir" default="/media/petrito1/Elements/robingas"/>-->
    <arg name="dir" default="$(env HOME)/workspace/data/robingas"/>
<!--    <arg name="dir" default="/subtdata/data/robingas/data"/>-->

    <!-- 22-10-27-unhost-final-demo -->
    <arg name="bag" default="$(arg dir)/22-10-27-unhost-final-demo/husky_2022-10-27-11-24-46.bag"/>
<!--    <arg name="bag" default="$(arg dir)/22-10-27-unhost-final-demo/husky_2022-10-27-12-15-42.bag"/>-->
<!--    <arg name="bag" default="$(arg dir)/22-10-27-unhost-final-demo/husky_2022-10-27-15-23-47.bag"/>-->
<!--    <arg name="bag" default="$(arg dir)/22-10-27-unhost-final-demo/husky_2022-10-27-15-33-57.bag"/>-->
<!--    <arg name="bag" default="$(arg dir)/22-10-27-unhost-final-demo/husky_2022-10-27-15-44-30.bag"/>-->
<!--    <arg name="bag" default="$(arg dir)/22-10-27-unhost-final-demo/husky_2022-10-27-16-09-55.bag"/>-->

    <!-- 22-10-27-unhost-final-demo / robingas_src -->
<!--    <arg name="bag" default="$(arg dir)/22-10-27-unhost-final-demo/robingas_src/husky_2022-10-27-11-24-46.bag"/>-->
<!--    <arg name="bag" default="$(arg dir)/22-10-27-unhost-final-demo/robingas_src/husky_2022-10-27-12-15-42.bag"/>-->
<!--    <arg name="bag" default="$(arg dir)/22-10-27-unhost-final-demo/robingas_src/husky_2022-10-27-15-23-47.bag"/>-->
<!--    <arg name="bag" default="$(arg dir)/22-10-27-unhost-final-demo/robingas_src/husky_2022-10-27-15-33-57.bag"/>-->
<!--    <arg name="bag" default="$(arg dir)/22-10-27-unhost-final-demo/robingas_src/husky_2022-10-27-15-44-30.bag"/>-->
<!--    <arg name="bag" default="$(arg dir)/22-10-27-unhost-final-demo/robingas_src/husky_2022-10-27-16-09-55.bag"/>-->
    <arg name="is_husky" default="$(eval 'husky' in bag)"/>
    <arg name="is_spot" default="$(eval 'spot' in bag)"/>

    <arg name="bag_dir" default="$(eval '/'.join(bag.split('/')[:-1]))"/>
    <arg name="bag_name" default="$(eval bag.split()[0].split('/')[-1])"/>
<!--    <arg name="bag_name" default="$(eval bag.split()[0].split('.')[0])"/>-->
    <arg name="params" default="$(eval bag.split()[0] + '.params')"/>

    <arg name="ouster_driver" default="true"/>
    <arg name="gpx_assignment" default="$(find gps_to_path)/data/unhost_final_demo_husky_west.gpx"/>
<!--    <arg name="gpx_assignment" default="$(find gps_to_path)/data/unhost_final_demo_spot_west_trimmed.gpx"/>-->
    <arg name="traversability" default="fused"/>
    <arg name="device" default="cpu"/>

    <arg name="screen" default="560x592x24"/>
    <arg name="display" default="$(env DISPLAY)"/>
    <arg name="launch_prefix" default="vglrun +v -d $(arg display) xvfb-run -a -s '-screen 0 $(arg screen)'"/>

    <arg name="in_fps" default="5"/>
    <arg name="out_fps" default="20"/>
    <arg name="speedup" default="$(eval round(out_fps / in_fps))"/>
    <arg name="codec" default="MJPG" doc="{MJPG, H264}"/>

    <arg name="robot" default="husky-robot" if="$(eval 'husky' in bag)"/>
    <arg name="robot" default="marv-robot" if="$(eval 'marv' in bag)"/>
    <arg name="robot" default="spot-3" if="$(eval 'spot' in bag)"/>
    <arg name="robot" default="ctu-robot" if="$(eval 'tradr' in bag or 'ugv' in bag)"/>

    <arg name="delay" default="5.0"/>
    <arg name="start" default="0.0"/>
    <arg name="rate" default="1.0"/>

    <rosparam command="load" file="$(arg params)"/>
    <param name="use_sim_time" value="true"/>

    <arg name="topics" default=""/>
    <node name="rosbag_play" pkg="rosbag" type="play" output="screen"
          args="--clock
                --delay $(arg delay)
                --start $(arg start)
                --rate $(arg rate)
                $(arg topics)
                -- $(arg bag)"
          required="true">
          <!-- Remap static transforms for filtering. -->
        <remap if="$(arg is_husky)" from="/tf_static" to="/tf_static/orig"/>
    </node>
    <group if="$(arg is_husky)">
        <!-- Fix camera optical frames: filter these out from tf static... -->
        <node name="tf_filter" pkg="nifti_vision_data" type="tf_filter">
            <rosparam>
                exclude_children: [camera_0, camera_2]
                latch: true
            </rosparam>
            <remap from="tf" to="/tf_static/orig"/>
            <remap from="tf_filtered" to="/tf_static"/>
        </node>
        <!-- Add corrected transforms. -->
        <node name="camera_tf_static_pub" pkg="tf_static_publisher" type="tf_static_publisher"
            output="screen">
            <rosparam>
                transforms:
                    camera_front: [0.01, 0.048, 0.002, -1.571, 0.0, -1.571, tower_camera_floor, camera_0]  # front
                    camera_rear: [-0.01, -0.048, 0.002, 1.571, 0.0, -1.571, tower_camera_floor, camera_2]  # rear
            </rosparam>
        </node>
    </group>
    <group if="$(arg is_spot)">
        <!-- Add frames used in images and calibration. -->
        <node name="camera_tf_static_pub" pkg="tf_static_publisher" type="tf_static_publisher"
            output="screen">
            <rosparam>
                transforms:
                    camera_front: [0.0, 0.0, 0.0, 3.142, 0.0, 0.0, pylon_camera_front, camera_0]  # front
                    camera_rear: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, pylon_camera_rear, camera_2]  # rear
            </rosparam>
        </node>
    </group>

    <!--
    <include if="$(arg lidar_proc)" file="$(dirname)/lidar_proc.launch">
        <arg name="rviz" value="false"/>
    </include>
    <include if="$(arg slam)" file="$(dirname)/slam.launch">
        <arg name="cloud" value="points_filtered"/>
    </include>
    -->
    <node if="$(arg ouster_driver)"
          name="latch_sensor_info" pkg="traversability_estimation" type="latch_sensor_info"
          output="screen">
        <param name="bag" value="$(arg bag)"/>
    </node>
    <node if="$(eval start != 0)"
          name="play_tf_static" pkg="traversability_estimation" type="play_tf_static"
          output="screen">
<!--        <param name="bag" value="$(eval '/'.join([bag_dir, 'tf', bag_name]))"/>-->
        <param name="bag" value="$(eval '/'.join([bag_dir, bag_name]))"/>
    </node>
    <node if="$(eval start == 0)"
          name="static_transform_mux" pkg="static_transform_mux" type="static_transform_mux"
          output="screen"/>

    <arg name="nodelet_manager" default=""/>
<!--    <arg name="nodelet_manager" default="laser_nodelet_manager"/>-->
    <arg name="nodelet_action" default="$(eval 'load' if nodelet_manager.strip() else 'standalone')"/>
    <node if="$(eval bool(nodelet_manager))"
          name="$(arg nodelet_manager)" pkg="nodelet" type="nodelet" args="manager"
          respawn="true" respawn_delay="1.0" output="screen">
        <param name="num_worker_threads" value="8"/>
    </node>

    <remap from="os_cloud_node/points" to="points"/>
    <include if="$(arg ouster_driver)" file="$(find cras_ouster_driver)/launch/os_cloud_node.launch">
        <arg name="fields_to_publish" value="intensity,t"/>
        <arg name="keep_organized" value="true"/>
        <arg name="publish_invalid" value="false"/>
        <arg name="max_range" value="50.0"/>
        <arg name="nodelet_manager" value="$(arg nodelet_manager)"/>
    </include>

    <include file="$(find traversability_estimation)/launch/cloud_filter.launch">
        <arg name="robot" value="$(arg robot)"/>
    </include>

    <include if="$(eval traversability == 'geometric')"
             file="$(find traversability_estimation)/launch/geometric_traversability.launch">
        <arg name="robot" value="$(arg robot)"/>
        <arg name="input" default="points_filtered"/>
        <arg name="output" default="traversability"/>
        <arg name="bumper" default="false"/>
    </include>

    <include if="$(eval traversability == 'semantic')"
             file="$(find traversability_estimation)/launch/semantic_traversability.launch">
        <arg name="device" value="$(arg device)"/>
        <arg name="input" default="points_filtered"/>
        <arg name="output" default="traversability"/>
    </include>

    <include if="$(eval traversability == 'fused')"
             file="$(find traversability_estimation)/launch/fused_traversability.launch">
        <arg name="device" value="$(arg device)"/>
        <arg name="robot" value="$(arg robot)"/>
        <arg name="input" default="points_filtered"/>
        <arg name="output" default="traversability"/>
    </include>

    <node if="0"
          name="rviz" pkg="rviz" type="rviz"
          args="-d $(dirname)/traversability_final_demo_visualization.rviz"
          respawn="true" respawn_delay="1.0" output="screen"/>

    <!-- RViz scenes: front and rear cameras with scene overlay. -->
    <node if="1" name="rviz_front_camera_overlay" pkg="rviz" type="rviz"
          args="-d $(dirname)/front_overlay_camera.rviz"
          respawn="true" respawn_delay="1.0" output="screen"
          launch-prefix="vglrun +v -d $(arg display) xvfb-run -a -s '-screen 0 872x487x24'"/>
    <node if="1" name="rviz_rear_camera_overlay" pkg="rviz" type="rviz"
          args="-d $(dirname)/rear_overlay_camera.rviz"
          respawn="true" respawn_delay="1.0" output="screen"
          launch-prefix="vglrun +v -d $(arg display) xvfb-run -a -s '-screen 0 872x487x24'"/>

    <!-- RViz scenes: geometric, semantic, fused traversability, and planning graph. -->
    <node if="1" name="rviz_geometric_traversability_scene" pkg="rviz" type="rviz"
          args="-d $(dirname)/traversability_scene.rviz"
          respawn="true" respawn_delay="1.0" output="screen"
          launch-prefix="vglrun +v -d $(arg display) xvfb-run -a -s '-screen 0 572x592x24'">
        <remap from="traversability" to="geometric_traversability"/>
        <remap from="rviz/scene" to="rviz/geometric_traversability_scene"/>
    </node>

    <node if="1" name="rviz_semantic_traversability_scene" pkg="rviz" type="rviz"
          args="-d $(dirname)/traversability_scene.rviz"
          respawn="true" respawn_delay="1.0" output="screen"
          launch-prefix="vglrun +v -d $(arg display) xvfb-run -a -s '-screen 0 572x592x24'">
        <remap from="traversability" to="semantic_traversability"/>
        <remap from="rviz/scene" to="rviz/semantic_traversability_scene"/>
    </node>

    <node if="1" name="rviz_fused_traversability_scene" pkg="rviz" type="rviz"
          args="-d $(dirname)/traversability_scene.rviz"
          respawn="true" respawn_delay="1.0" output="screen"
          launch-prefix="vglrun +v -d $(arg display) xvfb-run -a -s '-screen 0 572x592x24'">
        <remap from="traversability" to="fused_traversability"/>
        <remap from="rviz/scene" to="rviz/fused_traversability_scene"/>
    </node>

    <node if="1" name="rviz_graph_scene" pkg="rviz" type="rviz"
          args="-d $(dirname)/graph_pcd_scene.rviz"
          respawn="true" respawn_delay="1.0" output="screen"
          launch-prefix="vglrun +v -d $(arg display) xvfb-run -a -s '-screen 0 572x592x24'">
        <remap from="graph_pcd" to="graph_pcd"/>
        <remap from="rviz/scene" to="rviz/graph_pcd_scene"/>
    </node>

    <!-- Depth image of original point cloud. -->
    <node name="destagger_points" pkg="nodelet" type="nodelet"
          args="$(arg nodelet_action) cloud_proc/projection $(arg nodelet_manager)"
          respawn="true" respawn_delay="1.0" output="log">
            <rosparam subst_value="true">
                keep: 0  <!-- keep first -->
                azimuth_only: true
            </rosparam>
            <remap from="input" to="points_filtered"/>
            <remap from="output" to="points_destaggered"/>
    </node>

    <node name="points_to_depth" pkg="cloud_proc" type="cloud_to_image"
          respawn="true" respawn_delay="1.0" output="screen">
        <rosparam>
            scale: -25.5
            offset: 255
            encoding: mono8
        </rosparam>
        <remap from="cloud" to="points_destaggered"/>
        <remap from="image" to="points_depth"/>
    </node>

    <!-- v1 -->
    <node if="0" name="image_composer" pkg="nifti_vision_data" type="image_composer" output="screen">
        <rosparam subst_value="true">
            device: cuda
            size: [1080, 1920]
            fps: $(arg in_fps)
            streams:  # 3 x 2 grid (W x H)
              # Row 0
              - topic: /camera_front/image_color/compressed
                offset: [0, 0]
                size: [540, 864]
              - topic: /rviz/geometric_traversability_scene
                offset: [0, 864]
                size: [540, 528]
              - topic: /rviz/semantic_traversability_scene
                offset: [0, 1392]
                size: [540, 528]
              # Row 1
              - topic: /camera_rear/image_color/compressed
                offset: [540, 0]
                size: [540, 864]
              - topic: /rviz/fused_traversability_scene
                offset: [540, 864]
                size: [540, 528]
              - topic: /rviz/graph_pcd_scene
                offset: [540, 1392]
                size: [540, 528]
        </rosparam>
    </node>

    <!-- v2 -->
    <node name="image_composer" pkg="nifti_vision_data" type="image_composer" output="screen">
        <rosparam subst_value="true">
            device: cuda
            size: [1080, 1920]
            fps: $(arg in_fps)
            streams:  # 3 x 1 | 2 x 2 (H x W)
              # Left column 3 x 1
              - topic: /points_depth
                offset: [0, 0]
                size: [210, 840]
              - topic: /rviz/front_camera_overlay
                offset: [210, 0]
                size: [435, 840]
              - topic: /rviz/rear_camera_overlay
                offset: [645, 0]
                size: [435, 840]

              # Right column / row 0
              - topic: /rviz/geometric_traversability_scene
                offset: [0, 840]
                size: [540, 540]
              - topic: /rviz/semantic_traversability_scene
                offset: [0, 1380]
                size: [540, 540]
              
              # Right column / row 1
              - topic: /rviz/fused_traversability_scene
                offset: [540, 840]
                size: [540, 540]
              - topic: /rviz/graph_pcd_scene
                offset: [540, 1380]
                size: [540, 540]
        </rosparam>
    </node>

    <include file="$(dirname)/record_video.launch">
        <arg name="image" value="composite"/>
        <arg name="filename" value="$(dirname)/$(arg bag_name)_$(arg speedup)x.avi"/>
        <arg name="fps" value="$(arg out_fps)"/>
        <arg name="codec" value="$(arg codec)"/>
    </include>
</launch>
