#!/usr/bin/env python

from __future__ import absolute_import, division, print_function
import numpy as np
from numpy.lib.recfunctions import structured_to_unstructured, unstructured_to_structured
from datasets.rellis_3d import Rellis3DSequence, seq_names
from traversability_estimation.utils import filter_camera_points, normalize
# ROS
import rospy
from sensor_msgs.msg import CameraInfo, PointCloud2, CompressedImage
from nav_msgs.msg import Path
from geometry_msgs.msg import Transform, PoseStamped, TransformStamped
from ros_numpy import msgify
from tf.transformations import quaternion_from_matrix
import tf2_ros
from tf2_msgs.msg import TFMessage
import cv2


def publish_tf_pose(pose, child_frame_id):
    assert isinstance(pose, PoseStamped)
    br = tf2_ros.TransformBroadcaster()
    t = TransformStamped()
    t.header.stamp = pose.header.stamp
    t.header.frame_id = pose.header.frame_id
    t.child_frame_id = child_frame_id
    t.transform.translation.x = pose.pose.position.x
    t.transform.translation.y = pose.pose.position.y
    t.transform.translation.z = pose.pose.position.z
    t.transform.rotation.x = pose.pose.orientation.x
    t.transform.rotation.y = pose.pose.orientation.y
    t.transform.rotation.z = pose.pose.orientation.z
    t.transform.rotation.w = pose.pose.orientation.w
    br.sendTransform(t)


def matrix_to_pose_msg(T, frame_id):
    assert T.shape == (4, 4)
    pose = PoseStamped()
    pose.header.frame_id = frame_id
    pose.header.stamp = rospy.Time.now()
    pose.pose.position.x = T[0, 3]
    pose.pose.position.y = T[1, 3]
    pose.pose.position.z = T[2, 3]
    q = quaternion_from_matrix(T)
    pose.pose.orientation.x = q[0]
    pose.pose.orientation.y = q[1]
    pose.pose.orientation.z = q[2]
    pose.pose.orientation.w = q[3]
    return pose


class RobotData:
    def __init__(self, sequence='00000'):
        self.current_pose = None
        self.rgb = None
        self.semseg = None
        self.lidar_cloud = None
        self.global_cloud = None
        self.origin_frame = rospy.get_param('~origin_frame', 'odom')
        self.lidar_frame = rospy.get_param('~lidar_frame', 'ouster_lidar')
        self.camera_frame = rospy.get_param('~camera_frame', 'pylon_camera')
        self.publish_global_map = rospy.get_param('~publish_global_map', False)
        self.lidar_channels_H = rospy.get_param('~lidar_channels', 64)
        self.lidar_beams_W = rospy.get_param('~lidar_beams', 2048)
        self.path = Path()
        self.path.header.frame_id = self.origin_frame
        self.ds = Rellis3DSequence(seq=sequence)
        self.delay_start = rospy.get_param('~delay_start', 1.0)
        self.period = rospy.get_param('~period', 1.0)
        self.index = 0
        self.pose_step = rospy.get_param('~pose_step', 5)
        self.poses = list(self.ds.poses)
        self.clouds = list()

        self.path_pub = rospy.Publisher('~path', Path, queue_size=2)
        self.lidar_pc_pub = rospy.Publisher('~lidar_cloud', PointCloud2, queue_size=1)
        self.cam_pc_pub = rospy.Publisher('~camera_cloud', PointCloud2, queue_size=1)
        self.caminfo_pub = rospy.Publisher('~camera_info', CameraInfo, queue_size=1)
        self.tf_pub = rospy.Publisher('/tf', TFMessage, queue_size=2, latch=True)
        self.rgb_pub = rospy.Publisher('~rgb/compressed', CompressedImage, queue_size=1)
        self.semseg_pub = rospy.Publisher('~semantic_segmentation/compressed', CompressedImage, queue_size=1)
        self.time_stamp = rospy.Time.now()

        intrins_msg, tf_lidar2cam = self.get_camera_calib_msgs()
        self.calibration_msgs = {'intrinsics': intrins_msg, 'tf_lid2cam': tf_lidar2cam}

        self.timer = rospy.Timer(rospy.Duration(self.delay_start), self.start_timer, oneshot=True)
        self.publish_extrinsics()

    def publish_extrinsics(self, rate=100):
        rate = rospy.Rate(rate)
        while not rospy.is_shutdown():
            if not self.is_valid():
                rospy.loginfo('No more positions.')
                rospy.signal_shutdown('No more positions.')
            self.calibration_msgs['tf_lid2cam'].header.stamp = rospy.Time.now()
            self.tf_pub.publish(TFMessage([self.calibration_msgs['tf_lid2cam']]))
            rate.sleep()

    def start_timer(self, evt):
        self.timer = rospy.Timer(rospy.Duration(self.period), self.run)
        rospy.loginfo('Publishing robot data.')

    def is_valid(self):
        return not rospy.is_shutdown() and self.index < len(self.ds)

    def move(self):
        if self.index < len(self.ds) - self.pose_step:
            self.index += self.pose_step
        else:
            self.index = len(self.ds) - 1
        rospy.logdebug('Moved to next data sample')

    def step(self):
        if not self.is_valid():
            rospy.loginfo('No more positions.')
            rospy.signal_shutdown('No more positions.')

        cloud, cloud_label, pose, rgb, semseg = self.ds[self.index]

        self.current_pose = pose
        self.poses.append(self.current_pose)

        cloud_lid = structured_to_unstructured(cloud)

        if self.publish_global_map:
            cloud_map = cloud_lid.copy()
            cloud_map[..., :3] = np.matmul(cloud_lid[..., :3], pose[:3, :3].T) + pose[:3, 3:].T
            self.clouds.append(cloud_map)
            rospy.logdebug('Point cloud shape:', cloud_map.shape)
            global_cloud = np.asarray(np.concatenate(self.clouds), dtype=np.float32)
            global_cloud = unstructured_to_structured(global_cloud, names=cloud.dtype.names)
            self.global_cloud = global_cloud

        self.rgb = rgb
        self.semseg = semseg
        self.lidar_cloud = cloud_lid  # .reshape([self.lidar_channels_H, self.lidar_beams_W, -1])

    def run(self, evt):
        t0 = rospy.Time.now()
        self.step()
        rospy.logdebug('Data reading took %.3f sec' % (rospy.Time.now() - t0).to_sec())

        # get messages
        stamp = rospy.Time.now()
        self.time_stamp = stamp
        path_msg = self.get_path_msg(time_stamp=stamp)
        lidar_pc_msg = self.to_cloud_msg(self.lidar_cloud, time_stamp=stamp, frame=self.lidar_frame)
        img_msg = self.get_image_msg(self.rgb, time_stamp=stamp)
        semseg_msg = self.get_image_msg(self.semseg, time_stamp=stamp)
        if self.publish_global_map:
            global_pc_msg = self.to_cloud_msg(self.global_cloud, time_stamp=stamp, frame=self.origin_frame)
            cam_pc_msg = self.get_camera_cloud_msg(cloud_lid=self.lidar_cloud, time_stamp=stamp)

        t1 = rospy.Time.now()
        rospy.logdebug('Messages preparation took %.3f sec' % (t1 - stamp).to_sec())

        # publish messages
        self.calibration_msgs['intrinsics'].header.stamp = self.time_stamp
        self.caminfo_pub.publish(self.calibration_msgs['intrinsics'])
        self.path_pub.publish(path_msg)
        self.lidar_pc_pub.publish(lidar_pc_msg)
        self.rgb_pub.publish(img_msg)
        self.semseg_pub.publish(semseg_msg)
        if self.publish_global_map:
            self.map_pc_pub.publish(global_pc_msg)
            self.cam_pc_pub.publish(cam_pc_msg)

        rospy.logdebug('Messages publishing took %.3f sec' % (rospy.Time.now() - t1).to_sec())

        # move to next index
        self.move()

    def get_camera_cloud_msg(self, cloud_lid, time_stamp):
        img_height, img_width = self.ds.calibration['img_height'], self.ds.calibration['img_width']
        T_lid2cam = self.ds.calibration['lid2cam']
        K = self.ds.calibration['K']
        cloud_cam, _ = filter_camera_points(cloud_lid[..., :3], img_width, img_height, K, T_lid2cam)
        cloud_cam = np.asarray(cloud_cam, dtype=np.float32)
        cloud_cam = unstructured_to_structured(cloud_cam, names=['x', 'y', 'z'])
        pc_msg = msgify(PointCloud2, cloud_cam)
        pc_msg.header.frame_id = self.lidar_frame
        pc_msg.header.stamp = time_stamp
        return pc_msg

    def get_camera_calib_msgs(self, distortion_model="plumb_bob"):
        intrins_msg = CameraInfo()
        tf_lid2cam = TransformStamped()
        tf_lid2cam.header.frame_id = self.lidar_frame
        tf_lid2cam.child_frame_id = self.camera_frame
        tf_lid2cam.transform = msgify(Transform, np.linalg.inv(self.ds.calibration['lid2cam']))

        intrins_msg.header.frame_id = self.camera_frame
        intrins_msg.width = self.ds.calibration['img_width']
        intrins_msg.height = self.ds.calibration['img_height']
        intrins_msg.K = self.ds.calibration['K'].flatten().tolist()
        intrins_msg.D = self.ds.calibration['dist_coeff'].tolist()
        intrins_msg.P = self.ds.calibration['P'].flatten().tolist()
        intrins_msg.distortion_model = distortion_model
        return intrins_msg, tf_lid2cam

    def get_path_msg(self, time_stamp):
        assert self.current_pose.shape == (4, 4)
        pose_msg = matrix_to_pose_msg(self.current_pose, self.origin_frame)
        publish_tf_pose(pose_msg, child_frame_id=self.lidar_frame)
        self.path.poses.append(pose_msg)
        self.path.header.stamp = time_stamp
        return self.path

    def to_cloud_msg(self, cloud, time_stamp, frame):
        # publish point cloud
        if cloud.dtype.names is None:
            if cloud.shape[1] == 3:
                cloud = unstructured_to_structured(cloud, names=['x', 'y', 'z'])
            elif cloud.shape[1] == 4:
                cloud = unstructured_to_structured(cloud, names=['x', 'y', 'z', 'i'])
            elif cloud.shape[1] == 5:
                cloud = unstructured_to_structured(cloud, names=['x', 'y', 'z', 'i', 'l'])
            else:
                cloud = unstructured_to_structured(cloud[..., :3], names=['x', 'y', 'z'])
        pc_msg = msgify(PointCloud2, cloud)
        pc_msg.header.stamp = time_stamp
        pc_msg.header.frame_id = frame
        return pc_msg

    def get_image_msg(self, img, time_stamp):
        img = np.uint8(255 * normalize(img))[..., (2, 1, 0)]
        img_msg = CompressedImage()
        img_msg.header.stamp = time_stamp
        img_msg.header.frame_id = self.camera_frame
        img_msg.format = "jpeg"
        img_msg.data = np.array(cv2.imencode('.jpg', img)[1]).tobytes()
        return img_msg


def main():
    rospy.init_node('robot_data_rellis3d', log_level=rospy.INFO)
    subseq = rospy.get_param('~data_sequence', seq_names[0])
    proc = RobotData(subseq)
    rospy.spin()


if __name__ == '__main__':
    main()
