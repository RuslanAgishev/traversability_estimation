#!/usr/bin/env python

from __future__ import absolute_import, division, print_function
import rospy
from sensor_msgs.msg import PointCloud2
from tf2_ros import BufferCore, Buffer
from nav_msgs.msg import Path
from geometry_msgs.msg import PoseStamped, Pose
from rosbag import Bag, ROSBagException
import torch
import numpy as np
from ros_numpy import msgify, numpify
from numpy.lib.recfunctions import structured_to_unstructured, unstructured_to_structured
from scipy.spatial import KDTree
from tqdm import tqdm


def to_cloud_msg(cloud, time_stamp, frame, fields=None):
    if fields is None:
        fields = ['x', 'y', 'z']
    if cloud.dtype.names is None:
        # https://answers.ros.org/question/197309/rviz-does-not-display-pointcloud2-if-encoding-not-float32/
        cloud = np.asarray(cloud, dtype=np.float32)
        cloud = unstructured_to_structured(cloud, names=fields)
    pc_msg = msgify(PointCloud2, cloud)
    pc_msg.header.stamp = time_stamp
    pc_msg.header.frame_id = frame
    return pc_msg


def load_tf_buffer(bag_path):
    tf_topics = ['/tf', '/tf_static']
    # buffer = BufferCore(cache_time=rospy.Duration(2**31 - 1))
    # buffer = BufferCore(cache_time=rospy.Duration(24 * 60 * 60))
    buffer = BufferCore(rospy.Duration(24 * 60 * 60))
    try:
        with Bag(bag_path, 'r') as bag:
            for topic, msg, stamp in tqdm(bag.read_messages(topics=tf_topics),
                                          desc='%s: reading transforms' % bag_path.split('/')[-1],
                                          total=bag.get_message_count(topic_filters=tf_topics)):
                if topic == '/tf':
                    for tf in msg.transforms:
                        buffer.set_transform(tf, 'bag')
                elif topic == '/tf_static':
                    for tf in msg.transforms:
                        buffer.set_transform_static(tf, 'bag')
    except ROSBagException as ex:
        print('Could not read %s: %s' % (bag_path, ex))

    return buffer


class TravEval:
    def __init__(self):
        self.robot_frame = rospy.get_param('~robot_frame', 'base_link')
        self.fixed_frame = rospy.get_param('~fixed_frame', 'odom')
        self.pc_topic_in = rospy.get_param('~cloud_in', 'points')
        self.pc_topic_out = rospy.get_param('~cloud_out', 'points_trav')
        self.robot_radius = rospy.get_param('~robot_radius', 0.5)
        self.trav_field = rospy.get_param('~trav_field', 'untrav_cost')
        self.horizon_time = rospy.get_param('~horizon_time', 5.0)
        self.horizon_step = rospy.get_param('~horison_step', 1.0)
        assert self.horizon_step <= self.horizon_time
        self.pc_frame = None
        if torch.cuda.is_available():
            self.device = torch.device("cuda:0")
            torch.cuda.set_device(self.device)
        else:
            self.device = torch.device("cpu")
        self.future_path_pub = rospy.Publisher('~future_path', Path, queue_size=1)

        rospy.loginfo("Subscribed to " + self.pc_topic_in)
        self.pc_sub = rospy.Subscriber(self.pc_topic_in, PointCloud2, self.pc_callback)
        self.tf = load_tf_buffer(rospy.get_param('~bag', None))
        self.traversed_grid_pcd_pub = rospy.Publisher(self.pc_topic_out, PointCloud2, queue_size=1)

    def pc_callback(self, pc_msg):
        assert isinstance(pc_msg, PointCloud2)

        cloud = numpify(pc_msg)
        points = structured_to_unstructured(cloud[['x', 'y', 'z']])
        traversability = structured_to_unstructured(cloud[[self.trav_field]])
        rospy.logdebug('Traversability values: %s', np.unique(traversability))

        self.pc_frame = pc_msg.header.frame_id
        t_now = rospy.Time.now().to_sec()
        num = int(self.horizon_time // self.horizon_step) + 1

        robot_poses = []
        path_future = Path()
        for t in np.linspace(start=t_now, stop=t_now - self.horizon_time, num=num):
            try:
                trans_robot_pc = self.tf.lookup_transform_full_core(self.robot_frame, rospy.Time.from_sec(t),
                                                                    self.pc_frame, pc_msg.header.stamp,
                                                                    self.fixed_frame)
            except Exception as e:
                rospy.logwarn('No transformation between %s and %s: %s', self.pc_frame, self.robot_frame, e)
                return
            # transform point cloud to robot frame
            T_robot_pc = numpify(trans_robot_pc.transform)
            p = PoseStamped()
            p.pose = msgify(Pose, T_robot_pc)
            path_future.poses.append(p)

            robot_pose = T_robot_pc[:3, 3:4]
            robot_poses.append(robot_pose)

        path_future.header.stamp = rospy.Time.from_sec(t_now)
        path_future.header.frame_id = self.robot_frame
        self.future_path_pub.publish(path_future)

        robot_poses = np.concatenate(robot_poses, axis=1).T
        assert robot_poses.shape[1] == points.shape[1] == 3

        graph_tree = KDTree(points)
        nearest_graph_points_ind = graph_tree.query_ball_point(robot_poses, r=self.robot_radius)
        ids = [i for sublist in nearest_graph_points_ind for i in sublist]  # ravel list of lists
        nearest_graph_points = points[ids]
        nearest_graph_trav = traversability[ids]

        nearest_graph_points_msg = to_cloud_msg(np.concatenate([nearest_graph_points, nearest_graph_trav], axis=1),
                                                frame=self.robot_frame, time_stamp=rospy.Time.from_sec(t_now),
                                                fields=['x', 'y', 'z', self.trav_field])
        self.traversed_grid_pcd_pub.publish(nearest_graph_points_msg)


if __name__ == '__main__':
    rospy.init_node('find_traversed_points', log_level=rospy.INFO)
    proc = TravEval()
    rospy.spin()
