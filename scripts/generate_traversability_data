#!/usr/bin/env python
"""Generate self-supervised data from ROS bag files with robot trajectories.

Paramaters:
- Simplified robot model from primitives (bounding boxes, spheres).
- Lookahead time / distance to mark traversed-through points.

Multi-pass processing:
1. Load transforms from bag files into a buffer. There have to be a transform
   from the fixed frame to the robot.
2. Process bags again and annotate points within given horizon contained in
   the model primitives.
"""
from __future__ import absolute_import, division, print_function
from argparse import ArgumentParser
from glob import glob
from matplotlib import cm
import numpy as np
from numpy.lib.recfunctions import merge_arrays, unstructured_to_structured
import os
from ros_numpy import msgify, numpify
from rosbag import Bag, ROSBagException, Compression
import rospy
from sensor_msgs.msg import PointCloud2
from tf2_ros import BufferCore, TransformException
from traversability_estimation.geometry import affine, Bodies, Body, Box, Sphere  # needed for eval
from traversability_estimation.segmentation import compute_support, fit_planes, position, valid_point_mask
from traversability_estimation.utils import show_cloud, slots
from tqdm import tqdm

LABEL_FIELD_NAME = 'flexible'
LABEL_RIGID = 0
LABEL_FLEXIBLE = 1
# LABEL_INVALID = 254
LABEL_IGNORE = 255


def str2bool(v):
    return v.lower() in ('1', 'yes', 'true', 't', 'y')


def arg_parser():
    parser = ArgumentParser(epilog="""Path format uses following placeholders:
    {dir} - parent directory of the first bag file,
    {name} - name without extension of the first bag file,
    {topic} - name of the topic as read from bag file,
    {secs}, {nsecs} - timestamp from the header (if available).
    """)
    parser.add_argument('--topics', type=str, nargs='+')
    parser.add_argument('--fixed-frame', type=str, default='map')
    parser.add_argument('--robot-frame', type=str, default='base_link')
    parser.add_argument('--exclude-times', type=str, default=None)
    parser.add_argument('--discard-empty', type=bool, default=True)
    parser.add_argument('--input-step', type=int, default=1)
    parser.add_argument('--input-start', type=float, default=-float('inf'), help='Start time in seconds.')
    parser.add_argument('--input-end', type=float, default=float('inf'), help='End time in seconds.')
    parser.add_argument('--discard-model', type=str, default=None, help='Model at current position discarding points.')
    parser.add_argument('--flexible-model', type=str, default=None, help='Model to move along robot path marking points flexible.')
    parser.add_argument('--rigid-model', type=str, default=None, help='Model to move along robot path marking points rigid.')
    parser.add_argument('--rigid-primitives', type=str2bool, default=False, help='Fit primitives and mark the inliers as rigid.')
    parser.add_argument('--z-support', type=str, default=None, help='Z support configuration or empty.')
    parser.add_argument('--distance-horizon', '-d', type=float, default=10.0)
    parser.add_argument('--time-horizon', '-t', type=float, nargs=2, default=[0.0, 10.0])
    parser.add_argument('--time-step', '-s', type=float, default=0.5)
    parser.add_argument('--output-path', '-o', type=str, default='{dir}/{name}/{topic}/{secs}_{nsecs:09d}.npz')
    parser.add_argument('--output-bag-path', '-O', type=str, default='{dir}/{name}_segmented.bag')
    parser.add_argument('--output-topic', type=str, default='{topic}_segmented')
    parser.add_argument('--output-period', type=float, default=None)
    parser.add_argument('bag_paths', type=str, nargs='+')
    return parser


def get_topic_types(bag):
    return {k: v.msg_type for k, v in bag.get_type_and_topic_info().topics.items()}


def load_buffer(bag_paths):
    tf_topics = ['/tf', '/tf_static']
    # buffer = BufferCore(cache_time=rospy.Duration(2**31 - 1))
    # buffer = BufferCore(cache_time=rospy.Duration(24 * 60 * 60))
    buffer = BufferCore(rospy.Duration(24 * 60 * 60))
    for path in bag_paths:
        try:
            with Bag(path, 'r') as bag:
                for topic, msg, stamp in tqdm(bag.read_messages(topics=tf_topics),
                                              desc='%s: reading transforms' % path.split('/')[-1],
                                              total=bag.get_message_count(topic_filters=tf_topics)):
                    if topic == '/tf':
                        for tf in msg.transforms:
                            buffer.set_transform(tf, 'bag')
                    elif topic == '/tf_static':
                        for tf in msg.transforms:
                            buffer.set_transform_static(tf, 'bag')
        except ROSBagException as ex:
            print('Could not read %s: %s' % (path, ex))

    return buffer


def fit_primitives(x_valid):
    # Fit obstacle models (trunks or branches as cylinders, ground or walls as plane).
    models = []
    models += fit_planes(x_valid.T, 0.025, normal_z_limits=(0.0, 0.2), max_iterations=200, min_support=25,
                         max_models=10, cluster_eps=0.25, cluster_k=10, verbose=0, visualize=False)
    return models


def segment_cloud(flexible_model, arr, tfs, rigid_model=None, discard_tf=None, discard_model=None,
                  rigid_primitives=True, input_to_fixed=None, z_support=None):
    assert flexible_model is None or isinstance(flexible_model, Body)
    assert isinstance(arr, np.ndarray)
    assert rigid_model is None or isinstance(rigid_model, Body)
    assert discard_model is None or isinstance(discard_model, Body)

    # Use only valid points for all operations.
    # Assign results to valid points in the end.
    valid = valid_point_mask(arr, discard_tf=discard_tf, discard_model=discard_model)
    arr_valid = arr[valid]
    valid_ind = np.flatnonzero(valid)
    x = position(arr_valid).reshape((-1, 3))
    x = x.T

    # Initialize all labels as unknown.
    labels = np.full(arr.shape, LABEL_IGNORE, dtype=np.uint8).ravel()

    # Mark valid points which are contained by future model poses as empty.
    flexible = np.zeros((x.shape[1],), dtype=bool)
    rigid = np.zeros((x.shape[1],), dtype=bool)
    for tf in tfs:
        assert isinstance(tf, np.ndarray)
        y = affine(tf, x)
        if flexible_model:
            flexible = np.logical_or(flexible, flexible_model.contains(y))
        if rigid_model:
            rigid = np.logical_or(rigid, rigid_model.contains(y))

    # Fit geometric primitives to points and mark their inliers as rigid.
    if rigid_primitives:
        primitives = fit_primitives(x)
        for primitive, indices in primitives:
            rigid[indices] = True

    if z_support:
        support = compute_support(arr_valid, transform=input_to_fixed, **z_support)
        rigid[support > 30] = True

    labels[valid_ind[rigid]] = LABEL_RIGID
    # Flexible label takes precedence.
    labels[valid_ind[flexible]] = LABEL_FLEXIBLE

    # show_cloud(x.T, labels[valid_ind], min=0, max=2, colormap=cm.jet)

    labels = labels.reshape(arr.shape)
    return labels


def generate_data(bag_paths=None, topics=None, fixed_frame=None, robot_frame=None,
                  exclude_times=None, input_step=1, input_start=0.0, input_end=float('inf'),
                  discard_model=None, flexible_model=None, rigid_model=None, rigid_primitives=False, z_support=None,
                  discard_empty=False, distance_horizon=None, time_horizon=None, time_step=None,
                  output_path=None, output_bag_path=None, output_topic=None, output_period=None):
    assert bag_paths, bag_paths
    assert not exclude_times or all(len(t) == 2 for t in exclude_times), exclude_times
    assert len(time_horizon) == 2, time_horizon
    # TODO: Always look up t=0.
    assert 0.0 <= time_horizon[0] < time_horizon[1], time_horizon
    print('Time horizon:', time_horizon)

    dir = os.path.dirname(bag_paths[0])
    name, _ = os.path.splitext(os.path.basename(bag_paths[0]))

    n = [int(np.floor(h / time_step)) for h in time_horizon]

    last_out = {}

    if output_bag_path:
        output_bag_path = output_bag_path.format(dir=dir, name=name)
        if output_bag_path in bag_paths:
            print('Output %s removed from input bag files.' % output_bag_path)
            del bag_paths[bag_paths.index(output_bag_path)]
        output_bag = Bag(output_bag_path, 'w', compression=Compression.LZ4)
    else:
        output_bag = None

    buffer = load_buffer(bag_paths)
    for bag_path in bag_paths:

        with Bag(bag_path, 'r') as bag:

            topic_types = get_topic_types(bag)
            i = -1
            for topic, msg, stamp in tqdm(bag.read_messages(topics=topics),
                                          desc='%s: generating data' % bag_path.split('/')[-1],
                                          total=bag.get_message_count(topic_filters=topics)):
                i += 1
                if i % input_step != 0:
                    continue
                if stamp.to_sec() < input_start or stamp.to_sec() > input_end:
                    print('Skipping %s at %.3f s (outside input interval).' % (topic, stamp.to_sec()))
                    continue
                if exclude_times and any(t[0] <= stamp.to_sec() <= t[1] for t in exclude_times):
                    print('Skipping %s at %.3f s (excluded).' % (topic, stamp.to_sec()))
                    continue

                fmt_kwargs = {'dir': dir, 'name': name, 'topic': topic}
                if hasattr(msg, 'header'):
                    secs, nsecs = msg.header.stamp.secs, msg.header.stamp.nsecs
                    start = msg.header.stamp.to_sec()
                else:
                    secs, nsecs = stamp.secs, stamp.nsecs
                    start = stamp.to_sec()
                fmt_kwargs['secs'], fmt_kwargs['nsecs'] = secs, nsecs

                if output_period and topic in last_out and start - last_out[topic] < output_period:
                    continue

                try:
                    input_to_fixed = buffer.lookup_transform_core(fixed_frame, msg.header.frame_id, msg.header.stamp)
                except TransformException as ex:
                    print('Could not transform from %s to %s at %.3f s.' % (msg.header.frame_id, fixed_frame, t))
                    continue
                input_to_fixed = numpify(input_to_fixed.transform)

                tfs = []
                for t in np.linspace(start - n[0] * time_step, start + n[1] * time_step, sum(n) + 1):
                    try:
                        tf = buffer.lookup_transform_full_core(robot_frame, rospy.Time.from_seconds(t),
                                                               msg.header.frame_id, msg.header.stamp,
                                                               fixed_frame)
                    except TransformException as ex:
                        # print('Could not transform from %s to %s at %.3f s.' % (msg.header.frame_id, robot_frame, t))
                        continue
                    tf = numpify(tf.transform)
                    if tfs:
                        # Check distance horizon.
                        diff = np.matmul(tfs[n[0]], np.linalg.inv(tf))
                        distance = np.linalg.norm(diff[:-1, -1])
                        if distance > distance_horizon:
                            print('Distance horizon reached, %.3f m > %.3f m.' % (distance, distance_horizon))
                            break
                    tfs.append(tf)

                if not tfs:
                    continue

                if topic_types[topic] == 'sensor_msgs/PointCloud2':
                    msg = PointCloud2(*slots(msg))
                    arr = numpify(msg)

                    labels = segment_cloud(flexible_model, arr, tfs, rigid_model=rigid_model,
                                           discard_tf=tfs[n[0]], discard_model=discard_model,
                                           rigid_primitives=rigid_primitives,
                                           input_to_fixed=input_to_fixed, z_support=z_support)

                    labels = labels.reshape((arr.size, -1))
                    labels = unstructured_to_structured(labels, names=[LABEL_FIELD_NAME])
                    labels = labels.reshape(arr.shape)
                    segmented_arr = merge_arrays([arr, labels], flatten=True)

                    n_valid_labels = (segmented_arr[LABEL_FIELD_NAME] != LABEL_IGNORE).sum()
                    if discard_empty and n_valid_labels == 0:
                        print('Discarding cloud with no valid labels.')
                        continue
                    else:
                        print('Storing cloud with %i valid labels.' % n_valid_labels)

                    last_out[topic] = start

                    if output_path is not None:
                        p = output_path.format(**fmt_kwargs)
                        os.makedirs(os.path.dirname(p), exist_ok=True)
                        np.savez_compressed(p, {'cloud': segmented_arr})

                    if output_bag is not None:
                        t = output_topic.format(topic=topic)
                        segmented_msg = msgify(PointCloud2, segmented_arr)
                        segmented_msg.header = msg.header
                        output_bag.write(t, segmented_msg, stamp)
    if output_bag:
        output_bag.close()


def main():
    args = arg_parser().parse_args()
    print(args)
    if args.z_support is not None:
        args.z_support = eval(args.z_support)
        if 'scale' in args.z_support:
            scale = args.z_support['scale']
            if isinstance(scale, (float, int)):
                scale = [1.0, 1.0, scale]
            scale = np.asarray(scale).reshape((-1, 3))
            args.z_support['scale'] = scale
        print('Z support:', args.z_support)

    args.bag_paths = sum((glob(b) for b in args.bag_paths), start=[])
    print('Processing %i bag files:' % len(args.bag_paths), *args.bag_paths, sep='\n')

    if args.exclude_times:
        args.exclude_times = eval(args.exclude_times)
        args.exclude_times = [[t - args.time_horizon[1], t + args.time_horizon[1]]
                              if isinstance(t, (float, int)) else t
                              for t in args.exclude_times]
        print('Excluding times:', *args.exclude_times, sep='\n')
    if args.discard_model:
        args.discard_model = eval(args.discard_model)
        print('Discard model:', args.discard_model)
    if args.flexible_model:
        args.flexible_model = eval(args.flexible_model)
        print('Flexible model:', args.flexible_model)
    if args.rigid_model:
        args.rigid_model = eval(args.rigid_model)
        print('Rigid model:', args.rigid_model)

    generate_data(**vars(args))


if __name__ == '__main__':
    main()
