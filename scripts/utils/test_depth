#!/usr/bin/env python

import numpy as np
import torch
from argparse import ArgumentParser
from matplotlib import pyplot as plt
import datasets
from datasets.utils import convert_label
import yaml
import os


def main():
    parser = ArgumentParser()
    parser.add_argument('--dataset', type=str, default='Rellis3DClouds')
    parser.add_argument('--device', type=str, default='cpu')
    args = parser.parse_args()
    print(args)

    pkg_path = os.path.realpath(os.path.join(os.path.dirname(__file__), '../../'))

    # Initialize model with the best available weights
    # model_name = 'fcn_resnet50_lr_0.0001_bs_16_epoch_12_Rellis3DClouds_z_depth_iou_0.66.pth'
    # model_name = 'fcn_resnet50_lr_1e-05_bs_32_epoch_93_Rellis3DClouds_intensity_depth_iou_0.64.pth'
    # model_name = 'fcn_resnet50_lr_1e-05_bs_32_epoch_99_Rellis3DClouds_depth_iou_0.63.pth'
    # model_name = 'lraspp_mobilenet_v3_large_lr_0.0001_bs_50_epoch_59_Rellis3DClouds_z_depth_iou_0.73.pth'
    model_name = 'fcn_resnet101_lr_0.0001_bs_16_epoch_33_Rellis3DClouds_depth_iou_0.73.pth'
    # model_name = 'fcn_resnet50_lr_0.0001_bs_4_epoch_14_Rellis3DClouds_intensity_depth_iou_0.56.pth'
    model = torch.load(os.path.join(pkg_path, 'config/weights/depth_cloud', model_name), map_location=args.device)
    # model = torch.load(model_name, map_location=args.device)
    model.eval()

    data_fields = [f[1:-1] for f in ['_x_', '_y_', '_z_', '_intensity_', '_depth_'] if f in model_name]
    print('Model takes as input: %s' % ','.join(data_fields))
    Dataset = eval('datasets.%s' % args.dataset)
    ds = Dataset(split='test', fields=data_fields)

    for _ in range(5):
        # Apply inference preprocessing transforms
        xyzir, label = ds[np.random.choice(range(len(ds)))]
        batch = torch.from_numpy(xyzir).unsqueeze(0).to(args.device)

        # Use the model and visualize the prediction
        with torch.no_grad():
            pred = model(batch)['out']
        pred = pred.squeeze(0).cpu().numpy()

        if len(pred.shape) == 3:
            C, H, W = pred.shape
            pred = np.argmax(pred, axis=0)
            assert pred.shape == (H, W)
        pred = convert_label(pred, inverse=True)
        color_pred = ds.scan.sem_color_lut[pred]

        if len(label.shape) == 3:
            C, H, W = label.shape
            label = np.argmax(label, axis=0)
            assert label.shape == (H, W)
        label = convert_label(label, inverse=True)
        color_gt = ds.scan.sem_color_lut[label]

        plt.figure(figsize=(20, 10))
        plt.subplot(2, 1, 1)
        plt.imshow(color_pred)
        plt.title('Prediction')
        plt.subplot(2, 1, 2)
        plt.imshow(color_gt)
        plt.title('Ground truth')
        plt.show()


if __name__ == '__main__':
    main()
