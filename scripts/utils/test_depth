#!/usr/bin/env python

import cv2
import numpy as np
import torch
from argparse import ArgumentParser
from matplotlib import pyplot as plt
import datasets
from datasets.utils import convert_color
import yaml
import os

parser = ArgumentParser()
parser.add_argument('--dataset', type=str, default='Rellis3DCloud')
parser.add_argument('--device', type=str, default='cpu')
args = parser.parse_args()
print(args)

Dataset = eval('datasets.%s' % args.dataset)
ds = Dataset(split='test')

# Initialize model with the best available weights
model = torch.load('fcn_resnet50.pth', map_location=args.device)
model.eval()

# Apply inference preprocessing transforms
input, _ = ds[np.random.choice(range(len(ds)))]
batch = torch.from_numpy(input).unsqueeze(0).to(args.device)

# Use the model and visualize the prediction
with torch.no_grad():
    pred = model(batch)['out']
pred = pred.squeeze(0).cpu().numpy()
mask = np.argmax(pred, axis=0)

pkg_path = os.path.realpath(os.path.join(os.path.dirname(__file__), '../../'))
label_config = os.path.join(pkg_path, "config/rellis.yaml")
data_cfg = yaml.safe_load(open(label_config, 'r'))

result = convert_color(mask, data_cfg['color_map'])
plt.figure()
plt.imshow(result)
plt.show()
