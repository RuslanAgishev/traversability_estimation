#!/usr/bin/env python

from __future__ import absolute_import, division, print_function
import rospy
from sensor_msgs.msg import PointCloud2
import tf2_ros
import torch
import numpy as np
from ros_numpy import msgify, numpify
from numpy.lib.recfunctions import structured_to_unstructured, unstructured_to_structured


def to_cloud_msg(cloud, time_stamp, frame):
    # publish point cloud
    if cloud.dtype.names is None:
        cloud = unstructured_to_structured(cloud[:, :3], names=['x', 'y', 'z'])
    pc_msg = msgify(PointCloud2, cloud)
    pc_msg.header.stamp = time_stamp
    pc_msg.header.frame_id = frame
    return pc_msg


class PointsProcessor:
    def __init__(self, pc_topic='/points'):
        self.odom_frame = rospy.get_param('~odom_frame', 'odom')
        self.pc_frame = None
        self.clouds = []
        if torch.cuda.is_available():
            self.device = torch.device("cuda:0")
            torch.cuda.set_device(self.device)
        else:
            self.device = torch.device("cpu")

        self.pc_topic = rospy.get_param('~pointcloud_topic', pc_topic)
        rospy.loginfo("Subscribed to " + self.pc_topic)
        pc_sub = rospy.Subscriber(pc_topic, PointCloud2, self.pc_callback)
        self.tf = tf2_ros.Buffer()
        self.tl = tf2_ros.TransformListener(self.tf)

        self.map_pc_pub = rospy.Publisher('~map_cloud', PointCloud2, queue_size=1)

    def pc_callback(self, pc_msg):
        assert isinstance(pc_msg, PointCloud2)
        now = rospy.Time.now()

        cloud_lid = numpify(pc_msg)
        # remove inf points
        points = structured_to_unstructured(cloud_lid[['x', 'y', 'z']])
        traversability = structured_to_unstructured(cloud_lid[['obstacle']])
        rospy.logdebug('Traversability values: %s', np.unique(traversability))

        self.pc_frame = pc_msg.header.frame_id
        try:
            trans = self.tf.lookup_transform(self.odom_frame, self.pc_frame, rospy.Time())
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
            rospy.logwarn('No transformation between %s and %s', self.pc_frame, self.odom_frame)
            return
        pose = numpify(trans.transform)
        cloud_map = np.matmul(points, pose[:3, :3].T) + pose[:3, 3:].T
        self.clouds.append(cloud_map)

        global_cloud = np.asarray(np.concatenate(self.clouds), dtype=np.float32)
        global_cloud = unstructured_to_structured(global_cloud, names=['x', 'y', 'z'])
        rospy.logdebug('Global map shape: %s', global_cloud.shape)

        map_msg = to_cloud_msg(global_cloud, time_stamp=now, frame=self.odom_frame)
        self.map_pc_pub.publish(map_msg)


if __name__ == '__main__':
    rospy.init_node('pc_processor_node', log_level=rospy.DEBUG)
    proc = PointsProcessor(pc_topic='/points_filtered_kontron_traversability')
    rospy.spin()
