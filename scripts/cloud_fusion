#!/usr/bin/env python

import rospy
from sensor_msgs.msg import PointCloud2
from geometry_msgs.msg import TransformStamped
from std_msgs.msg import Float64
from ros_numpy import msgify, numpify
import tf2_ros
import numpy as np
from numpy.lib.recfunctions import structured_to_unstructured, unstructured_to_structured
from timeit import default_timer as timer
import scipy.spatial
from threading import RLock


def sigmoid(x):
    return 1.0 / (1.0 + np.exp(-x))


def msgify_cloud(cloud, frame, stamp, names=None):
    if not names:
        # names = cloud.dtype.names
        names = ['x', 'y', 'z', 'cost']
    cloud = unstructured_to_structured(cloud, names=names)
    msg = msgify(PointCloud2, cloud)
    msg.header.frame_id = frame
    msg.header.stamp = stamp
    return msg


class CloudFusion:
    """
    This ROS node subscribes to cost clouds topic with PointCloud2 msgs
    and concatenates them in one global PointCloud2 map.
    Merging the points is done by determining firstly the new points by
    proximity threshold to the points in existing map.
    """
    def __init__(self, cloud_topic='cloud'):
        # Set the device
        self.global_map = None
        self.local_map = None
        self.new_map = None
        self.map_frame = rospy.get_param('~map_frame', 'odom')
        # any point that is farer than this threshold from points in existing cloud is considered as new
        self.dist_th = rospy.get_param('~pts_proximity_th', 0.2)
        self.max_age = rospy.get_param('~max_age', 1.0)
        self.input_names = ['x', 'y', 'z', rospy.get_param('~label_to_fuse', 'cost')]
        self.max_n_pts = rospy.get_param('~max_n_pts', None)
        self.fusion_mode = rospy.get_param('~fusion_mode', 'min')
        assert self.fusion_mode in ['merge', 'min', 'max', 'mean']

        self.rate = rospy.get_param('~rate', 1.0)
        self.fused_cloud_pub = rospy.Publisher(rospy.get_param('~cloud_out', 'cloud_out'), PointCloud2, queue_size=1)
        self.new_cloud_pub = rospy.Publisher('~new_points', PointCloud2, queue_size=1)
        self.common_cloud_pub = rospy.Publisher('~common_points', PointCloud2, queue_size=1)

        self.tf = tf2_ros.Buffer(cache_time=rospy.Duration(100))
        self.tl = tf2_ros.TransformListener(self.tf)
        self.lock = RLock()

        self.total_cost = 0.0
        self.cost_pub = rospy.Publisher('~total_cost', Float64, queue_size=1)
        self.eps = 1e-6

        self.local_map_sub = rospy.Subscriber(cloud_topic, PointCloud2, self.accumulate_clouds_cb)
        rospy.loginfo('Traversability fusion node is ready.')

    def fuse_traversability(self, cost_prev, cost):
        assert isinstance(cost_prev, np.ndarray)
        assert isinstance(cost, np.ndarray)
        cost = np.concatenate([cost_prev, cost], axis=1)
        assert cost.ndim >= 2

        n_pts = cost.shape[0]  # (n, >=2)
        cost = cost.reshape([n_pts, -1])

        if self.fusion_mode == 'merge':
            if cost.min() <= -self.eps or cost.max() >= 1.0 + self.eps:
                cost = sigmoid(cost)
            assert cost.min() >= 0.0 - self.eps and cost.max() <= 1.0 + self.eps
            cost = np.clip(cost, self.eps, 1 - self.eps)
            lo = np.log(1. - cost).sum(axis=1)
            cost = 1. - np.exp(lo)
        elif self.fusion_mode == 'min':
            cost = np.min(cost, axis=1)
        elif self.fusion_mode == 'max':
            cost = np.max(cost, axis=1)
        elif self.fusion_mode == 'mean':
            cost = np.mean(cost, axis=1)
        assert cost.shape == (n_pts,)

        return cost

    def accumulate_clouds_cb(self, pc_msg):
        assert isinstance(pc_msg, PointCloud2)

        # Discard old messages.
        msg_stamp = rospy.Time.now()
        age = (msg_stamp - pc_msg.header.stamp).to_sec()
        if age > self.max_age:
            rospy.logwarn('CLoud Fusion: discarding points %.1f s > %.1f s old.', age, self.max_age)
            return

        try:
            transform = self.tf.lookup_transform(self.map_frame, pc_msg.header.frame_id,
                                                 pc_msg.header.stamp, rospy.Duration(1))
        except (tf2_ros.LookupException, tf2_ros.ExtrapolationException) as e:
            rospy.logwarn('No transform between %s and %s: %s', pc_msg.header.frame_id, self.map_frame, e)
            return

        with self.lock:
            self.process(pc_msg, transform)

    def process(self, pc_msg, transform):
        assert isinstance(pc_msg, PointCloud2)
        assert isinstance(transform, TransformStamped)

        t0 = timer()
        # Transform local map to ground truth localization frame
        local_map = np.array(numpify(pc_msg))
        local_map = structured_to_unstructured(local_map[self.input_names])
        rospy.logdebug('Point cloud of shape %s is received', local_map.shape)
        local_map = local_map
        assert len(local_map.shape) == 2
        assert local_map.shape[1] == 4

        if local_map.shape[0] == 0:
            rospy.logwarn('Received empty cloud for processing')
            rospy.loginfo('Traversability cost: %s', self.total_cost)
            return

        pose = np.array(numpify(transform.transform))

        # transform points to map frame
        local_map[..., :3] = np.matmul(local_map[..., :3], pose[:3, :3].T) + pose[:3, 3:].T
        assert len(local_map.shape) == 2
        assert local_map.shape[1] == 4
        n_pts = local_map.shape[0]

        if self.global_map is None:
            self.global_map = local_map
            self.local_map = local_map
        assert self.global_map.ndim == 2
        assert self.global_map.shape[1] == 4  # (N, 4)
        rospy.logdebug('Global map shape %s', self.global_map.shape)

        tree = scipy.spatial.cKDTree(self.global_map[..., :3])
        dists, idxs = tree.query(local_map[..., :3], k=1)
        common_pts_mask = dists <= self.dist_th

        assert len(dists) == local_map.shape[0]
        assert len(idxs) == local_map.shape[0]
        self.new_map = local_map[~common_pts_mask, :]
        self.local_map = local_map

        rospy.logdebug('Adding %i new points', self.new_map.shape[0])
        assert self.new_map.ndim == 2
        assert self.new_map.shape[1] == 4  # (n, 4)

        # and accumulate new points to global map
        self.global_map = np.concatenate([self.global_map, self.new_map], axis=0)
        assert self.global_map.ndim == 2
        assert self.global_map.shape[1] == 4  # (N, 4)

        # fuse traversability values
        cost_prev = self.global_map[idxs, 3:4]
        cost = self.local_map[..., 3:4]
        cost = self.fuse_traversability(cost_prev, cost)
        assert cost.shape == (n_pts,)
        self.global_map[idxs, 3] = cost

        # forget old points
        if self.max_n_pts:
            if len(self.global_map) > self.max_n_pts:
                self.global_map = self.global_map[-self.max_n_pts:]

        self.total_cost = self.global_map[..., 3].sum()
        rospy.loginfo('Traversability cost: %s', self.total_cost)

        rospy.loginfo('Point cloud accumulation took: %.3f s', timer() - t0)

    def spin(self):
        rate = rospy.Rate(self.rate)
        while not rospy.is_shutdown():

            if self.global_map is None:
                continue

            # publish clouds and total cost
            t_now = rospy.Time.now()
            global_map_msg = msgify_cloud(self.global_map, frame=self.map_frame, stamp=t_now, names=self.input_names)
            self.fused_cloud_pub.publish(global_map_msg)

            if self.new_map is None:
                continue

            new_map_msg = msgify_cloud(self.new_map, frame=self.map_frame, stamp=t_now, names=self.input_names)
            self.new_cloud_pub.publish(new_map_msg)

            cost_msg = Float64()
            cost_msg.data = self.total_cost
            self.cost_pub.publish(cost_msg)

            rate.sleep()


if __name__ == '__main__':
    rospy.init_node('traversability_mapping', log_level=rospy.INFO)
    proc = CloudFusion(cloud_topic=rospy.get_param('~cloud_in', 'cloud_in'))
    proc.spin()
